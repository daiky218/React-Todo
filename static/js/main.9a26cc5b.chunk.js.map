{"version":3,"sources":["utils/constants.js","components/Todo/Input.js","components/Todo/Item.js","components/Todo/List.js","components/Todo/FunctionalArea.js","components/Todo/index.js","components/DarkModeToggle.js","hooks/useLocalStorage.js","hooks/useDarkMode.js","App.js","index.js"],"names":["SHOWALL","SHOWACTIVE","SHOWCOMPLETED","Input","styled","input","props","theme","TodoBGColor","TodoFontColor","TodoInput","addItem","useState","content","setContent","type","value","onChange","event","target","onKeyPress","charCode","prevItems","id","v4","isComplete","placeholder","TodoItem","item","updateItems","className","checked","map","prevItem","htmlFor","onClick","filter","color","size","List","ul","SeparationlineColor","TodoCompleteFontColor","EmptyItem","li","TodoList","items","setItems","showItems","setShowItems","useEffect","length","FuncList","div","FunctionalArea","left","updateType","typeClick","Todo","showType","setShowType","Toggle","button","DarkModeToggle","darkMode","setDarkMode","useLocalStorage","key","initialValue","window","localStorage","getItem","JSON","parse","storedValue","setStoredValue","valueToStore","Function","setItem","stringify","useDarkMode","enabledState","setEnabledState","enabled","GlobalStyle","createGlobalStyle","DesktopBGImg","BasicBGColor","light","TodoplaceholderFontColor","MobileBGImg","dark","Container","App","Fragment","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"yNAAaA,EAAU,MACVC,EAAa,SACbC,EAAgB,Y,OCIvBC,EAAQC,IAAOC,MAAV,8eAUW,SAAAC,GAAK,OAAEA,EAAMC,MAAMC,eAC9B,SAAAF,GAAK,OAAEA,EAAMC,MAAME,iBAiCfC,EAvBG,SAAC,GAAiB,IAAfC,EAAc,EAAdA,QAAc,EACHC,mBAAS,IADN,mBAC1BC,EAD0B,KACjBC,EADiB,KAYjC,OACE,cAACX,EAAD,CACEY,KAAK,OACLC,MAAOH,EACPI,SAdkB,SAACC,GAAD,OAAWJ,EAAWI,EAAMC,OAAOH,QAerDI,WAbkB,SAACF,GACjBL,GD7BsB,KC6BXK,EAAMG,WACnBV,GAAQ,SAACW,GACP,MAAM,CAAE,CAAEC,GAAIC,cAAMX,UAASY,YAAY,IAAzC,mBAAqDH,OAEvDR,EAAW,MASXY,YAAY,yB,QCPHC,EAnCE,SAAC,GAA2B,IAAzBC,EAAwB,EAAxBA,KAAMC,EAAkB,EAAlBA,YAoBxB,OACE,+BACE,sBAAKC,UAAU,WAAf,UACE,uBAAOf,KAAK,WAAWQ,GAAIK,EAAKL,GAAIQ,QAASH,EAAKH,WAAYR,SAjBpE,WACEW,EAAKH,YAAcG,EAAKH,WACxBI,GAAY,SAACP,GAAD,OACVA,EAAUU,KAAI,SAACC,GAIb,OAHIA,EAASV,KAAOK,EAAKL,KACvBU,EAASR,WAAaG,EAAKH,YAEtBQ,WAWP,uBAAOC,QAASN,EAAKL,QAEvB,qBAAKO,UAAW,aARXF,EAAKH,WAAW,aAAa,IAQlC,SACE,+BAAOG,EAAKf,YAEd,wBAAQsB,QA5BZ,WACEN,GAAY,SAACP,GAAD,OACVA,EAAUc,QAAO,SAACH,GAAD,OAAcA,EAASV,KAAOK,EAAKL,UA0BpD,SACE,cAAC,IAAD,CAAGc,MAAO,oBAAqBC,KAAK,eC7BtCC,EAAOnC,IAAOoC,GAAV,81DAWc,SAAAlC,GAAK,OAAEA,EAAMC,MAAMC,eAEZ,SAAAF,GAAK,OAAEA,EAAMC,MAAMkC,uBAuDrC,SAAAnC,GAAK,OAAEA,EAAMC,MAAME,iBAGnB,SAAAH,GAAK,OAAEA,EAAMC,MAAMmC,yBAiB1BC,EAAYvC,IAAOwC,GAAV,qGACJ,SAAAtC,GAAK,OAAEA,EAAMC,MAAME,iBAmCfoC,EA5BE,SAAC,GAA+B,IAA7BC,EAA4B,EAA5BA,MAAO/B,EAAqB,EAArBA,KAAMgC,EAAe,EAAfA,SAAe,EACZnC,mBAASkC,GADG,mBACvCE,EADuC,KAC5BC,EAD4B,KAW9C,OATAC,qBAAU,WAEND,EADElC,IAASf,EACE8C,EACJ/B,IAASd,EACL6C,EAAMV,QAAO,SAACR,GAAD,OAA8B,IAApBA,EAAKH,cAE5BqB,EAAMV,QAAO,SAACR,GAAD,OAA8B,IAApBA,EAAKH,iBAE1C,CAACV,EAAM+B,IAER,cAACP,EAAD,UACGS,EAAUG,OACTH,EAAUhB,KAAI,SAACJ,GACb,OAAO,cAAC,EAAD,CAAwBA,KAAMA,EAAMC,YAAakB,GAAlCnB,EAAKL,OAG7B,cAACoB,EAAD,UACE,+CACc5B,IAASb,EAAgB,YAAc,SADrD,sBCnHJkD,EAAWhD,IAAOiD,IAAV,wvCAGQ,SAAA/C,GAAK,OAAEA,EAAMC,MAAMC,eAmCf,SAAAF,GAAK,OAAEA,EAAMC,MAAMC,eA+C9B8C,EA5BQ,SAAC,GAA4C,IAA1CC,EAAyC,EAAzCA,KAAMxC,EAAmC,EAAnCA,KAAMyC,EAA6B,EAA7BA,WAAW3B,EAAkB,EAAlBA,YAC/C,SAAS4B,EAAUvC,GACjBsC,EAAWtC,EAAMC,OAAOI,IAQ1B,OACE,eAAC6B,EAAD,WACE,iCAAOG,EAAP,iBACA,sBAAKzB,UAAU,YAAf,UACE,wBAAQP,GAAIvB,EAASmC,QAASsB,EAAW3B,UAAWf,IAAOf,EAAQ,SAAS,GAA5E,iBAGA,wBAAQuB,GAAItB,EAAYkC,QAASsB,EAAW3B,UAAWf,IAAOd,EAAW,SAAS,GAAlF,oBAGA,wBAAQsB,GAAIrB,EAAeiC,QAASsB,EAAW3B,UAAWf,IAAOb,EAAc,SAAS,GAAxF,0BAIF,wBAAQiC,QApBZ,WACEN,GAAY,SAACP,GAAD,OACVA,EAAUc,QAAO,SAACH,GAAD,OAAeA,EAASR,kBAkBzC,iCCnESiC,EAXF,WAAO,IAAD,EACS9C,mBAAS,IADlB,mBACVkC,EADU,KACHC,EADG,OAEenC,mBAASZ,GAFxB,mBAEV2D,EAFU,KAEAC,EAFA,KAGjB,OACE,eAAC,WAAD,WACE,cAAC,EAAD,CAAWjD,QAASoC,IACpB,cAAC,EAAD,CAAUD,MAAOA,EAAO/B,KAAM4C,EAAUZ,SAAUA,IAClD,cAAC,EAAD,CAAgBQ,KAAMT,EAAMV,QAAO,SAACR,GAAD,OAAWA,EAAKH,cAAY0B,OAAQpC,KAAM4C,EAAUH,WAAYI,EAAa/B,YAAakB,Q,gBCL7Hc,EAASzD,IAAO0D,OAAV,mFAKGC,EAXQ,SAAC,GAA4B,IAA3BC,EAA0B,EAA1BA,SAASC,EAAiB,EAAjBA,YAC9B,OAAO,cAACJ,EAAD,CAAQ1B,QAAS,WAAQ8B,GAAaD,IAAtC,SACFA,EAAW,cAAC,IAAD,CAAM3B,MAAO,QAASC,KAAK,SAAW,cAAC,IAAD,CAAKD,MAAO,QAASC,KAAK,YCYrE4B,EAbS,SAACC,EAAKC,GAAkB,IAAD,EACLxD,oBAAS,WAC3C,IAAMgB,EAAOyC,OAAOC,aAAaC,QAAQJ,GACzC,OAAOvC,EAAO4C,KAAKC,MAAM7C,GAAQwC,KAHM,mBACpCM,EADoC,KACvBC,EADuB,KAW3C,MAAO,CAACD,EANS,SAAC1D,GAEd,IAAM4D,EAAe5D,aAAiB6D,SAAW7D,EAAM0D,GAAe1D,EACtE2D,EAAeC,GACfP,OAAOC,aAAaQ,QAAQX,EAAKK,KAAKO,UAAUH,OCQzCI,EAhBK,WAAO,IAAD,EACgBd,EAAgB,qBADhC,mBACjBe,EADiB,KACHC,EADG,KAElBC,EAAkC,qBAAjBF,GAA+BA,EAYtD,OAXA/B,qBAAU,cAQP,CAACiC,IAGG,CAACF,EAAcC,ICZlBE,EAAcC,YAAH,gPAEO,SAAC/E,GAAD,OAAWA,EAAMC,MAAM+E,gBAGvB,SAAChF,GAAD,OAAWA,EAAMC,MAAMgF,gBAKzCC,EAAQ,CACZD,aAAc,qBACd/E,YAAa,kBACbC,cAAe,qBACfiC,sBAAuB,oBACvB+C,yBAA0B,oBAC1BhD,oBAAoB,qBACpB6C,aAAc,0BACdI,YAAa,0BAETC,EAAO,CACXJ,aAAc,qBACd/E,YAAa,qBACbC,cAAe,qBACfiC,sBAAuB,qBACvB+C,yBAA0B,oBAC1BhD,oBAAoB,qBACpB6C,aAAc,yBACdI,YAAa,yBAGTE,EAAYxF,IAAOiD,IAAV,u9BAkCW,SAAC/C,GAAD,OAAWA,EAAMC,MAAMmF,eAuClCG,EArBH,WAAO,IAAD,EACgBb,IADhB,mBACThB,EADS,KACCC,EADD,KAEhB,OACE,cAAC,IAAD,CAAe1D,MAAOyD,EAAS2B,EAAKH,EAApC,SACE,eAAC,IAAMM,SAAP,WACE,cAACV,EAAD,IACA,cAACQ,EAAD,UACE,sBAAK9D,UAAU,MAAf,UACE,sBAAKA,UAAU,MAAf,UACE,oBAAIA,UAAU,QAAd,kBACA,cAAC,EAAD,CAAgBkC,SAAUA,EAAUC,YAAaA,OAEnD,cAAC,EAAD,IACA,mBAAGnC,UAAU,MAAb,sDCnGZiE,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.9a26cc5b.chunk.js","sourcesContent":["export const SHOWALL = 'all';\nexport const SHOWACTIVE = 'active';\nexport const SHOWCOMPLETED = 'completed';\nexport const CHARCODE_ENTER = 13;\n","import React, { useState } from \"react\";\nimport styled from \"styled-components\";\nimport { v4 } from \"uuid\";\nimport { CHARCODE_ENTER } from \"../../utils/constants\";\n\n\nconst Input = styled.input`\n  font-family: \"Josefin Sans\", sans-serif;\n  font-size: 18px;\n  width: 100%;\n  height: 60px;\n  line-height: 60px;\n  border: none;\n  border-radius: 10px;\n  outline: none;\n  padding-left: 57px;\n  background-color: ${props=>props.theme.TodoBGColor};\n  color: ${props=>props.theme.TodoFontColor};\n  &::placeholder {\n    color: hsl(236, 9%, 61%);\n  }\n  margin-bottom: 25px;\n  box-shadow: 7.1px 6px 6.5px rgba(0, 0, 0, 0.058),\n    30.8px 26.3px 21.9px rgba(0, 0, 0, 0.074),\n    117px 100px 98px rgba(0, 0, 0, 0.11);\n`;\n\nconst TodoInput = ({ addItem }) => {\n  const [content, setContent] = useState(\"\");\n  const contentChange = (event) => setContent(event.target.value);\n  \n  const enterKeyPress = (event) => {\n    if (content && event.charCode === CHARCODE_ENTER) {\n      addItem((prevItems) => {\n        return [{ id: v4(), content, isComplete: false }, ...prevItems];\n      });\n      setContent(\"\");\n    }\n  };\n  return (\n    <Input\n      type=\"text\"\n      value={content}\n      onChange={contentChange}\n      onKeyPress={enterKeyPress}\n      placeholder=\"Creat a new todo...\"\n    />\n  );\n};\n\nexport default TodoInput;\n","import React from \"react\";\nimport { X } from \"react-feather\";\n\nconst TodoItem = ({ item, updateItems }) => {\n  function deleteClick() {\n    updateItems((prevItems) =>\n      prevItems.filter((prevItem) => prevItem.id !== item.id)\n    );\n  }\n  function completeChange() {\n    item.isComplete = !item.isComplete;\n    updateItems((prevItems) =>\n      prevItems.map((prevItem) => {\n        if (prevItem.id === item.id) {\n          prevItem.isComplete = item.isComplete;\n        }\n        return prevItem;\n      })\n    );\n  }\n  function completeClass (){\n    return item.isComplete?\" completed\":\"\"\n  }\n  return (\n    <li>\n      <div className=\"checkBox\">\n        <input type=\"checkbox\" id={item.id} checked={item.isComplete} onChange={completeChange} />\n        <label htmlFor={item.id}></label>\n      </div>\n      <div className={\"itemTitle\"+completeClass()}>\n        <span>{item.content}</span>\n      </div>\n      <button onClick={deleteClick}>\n        <X color={\"hsl(236, 9%, 61%)\"} size=\"25px\" />\n      </button>\n    </li>\n  );\n};\nexport default TodoItem;\n","import React, { useState, useEffect } from \"react\";\nimport styled from \"styled-components\";\nimport TodoItem from \"./Item\";\nimport { SHOWALL,SHOWACTIVE,SHOWCOMPLETED } from \"../../utils/constants\";\nconst List = styled.ul`\n  width: 100%;\n  box-shadow: 6.5px 5.5px 6.5px rgba(0, 0, 0, 0.036),\n    28.5px 24.4px 21.9px rgba(0, 0, 0, 0.078),\n    117px 100px 98px rgba(0, 0, 0, 0.11);\n  border-radius: 10px 10px 0 0;\n  overflow: hidden;\n  li {\n    display: flex;\n    justify-content: space-between;\n    list-style: none;\n    background-color: ${props=>props.theme.TodoBGColor};\n    height: 60px;\n    border-bottom: 1px solid ${props=>props.theme.SeparationlineColor};\n\n  }\n  .checkBox {\n    width: 25px;\n    height: 25px;\n    margin: 17.5px 16px;\n    position: relative;\n  }\n  input[type=\"checkbox\"] {\n    position: absolute;\n    visibility: hidden;\n    width: 25px;\n    height: 25px;\n  }\n  input[type=\"checkbox\"]:checked + label::before,\n  input[type=\"checkbox\"]:checked + label::after {\n    opacity: 1;\n  }\n  label {\n    cursor: pointer;\n    position: absolute;\n    width: 25px;\n    height: 25px;\n    border: 1px solid hsl(233, 11%, 84%);\n    border-radius: 50%;\n  }\n  label::before {\n    content: \"\";\n    position: absolute;\n    background: linear-gradient(hsl(192, 100%, 67%), hsl(280, 87%, 65%));\n    width: 25px;\n    height: 25px;\n    border-radius: 50%;\n    top: -1px;\n    left: -1px;\n    opacity: 0;\n  }\n  label::after {\n    content: \"\";\n    position: absolute;\n    width: 6px;\n    height: 12px;\n    border-bottom: 3px solid white;\n    border-right: 3px solid white;\n    transform: rotate(45deg);\n    left: 8.5px;\n    top: 4.5px;\n    opacity: 0;\n  }\n\n  .itemTitle {\n    width: 100%;\n    display: flex;\n    align-items: center;\n    color: ${props=>props.theme.TodoFontColor};\n  }\n  .itemTitle.completed {\n    color: ${props=>props.theme.TodoCompleteFontColor};\n    text-decoration: line-through;\n  }\n\n  button {\n    cursor: pointer;\n    width: 25px;\n    height: 25px;\n    margin: 17.5px 16px 17.5px 10px;\n    border: none;\n    background-color: transparent;\n    transition: 0.5s;\n  }\n  button:hover {\n    transform: scale(1.4);\n  }\n`;\nconst EmptyItem = styled.li`\n  color: ${props=>props.theme.TodoFontColor};\n  span {\n    line-height: 60px;\n    margin: auto;\n  }\n`;\n\nconst TodoList = ({ items, type, setItems }) => {\n  const [showItems, setShowItems] = useState(items);\n  useEffect(() => {\n    if (type === SHOWALL) {\n      setShowItems(items);\n    } else if (type === SHOWACTIVE) {\n      setShowItems(items.filter((item) => item.isComplete === false));\n    } else {\n      setShowItems(items.filter((item) => item.isComplete === true));\n    }\n  }, [type, items]);\n  return (\n    <List>\n      {showItems.length ? (\n        showItems.map((item) => {\n          return <TodoItem key={item.id} item={item} updateItems={setItems} />;\n        })\n      ) : (\n        <EmptyItem>\n          <span>\n            There's no {type === SHOWCOMPLETED ? \"completed\" : \"active\"} Todo\n            here.\n          </span>\n        </EmptyItem>\n      )}\n    </List>\n  );\n};\nexport default TodoList;\n","import React from \"react\";\nimport styled from \"styled-components\";\nimport { SHOWALL,SHOWACTIVE,SHOWCOMPLETED } from \"../../utils/constants\";\n\nconst FuncList = styled.div`\n  width: 100%;\n  position: relative;\n  background-color: ${props=>props.theme.TodoBGColor};\n  height: 60px;\n  line-height: 60px;\n  border-radius: 0 0 10px 10px;\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  padding: 0 16px 0;\n  font-size: 14px;\n  span {\n    color: hsl(236, 9%, 61%);\n  }\n  button {\n    cursor: pointer;\n    border: none;\n    background-color: transparent;\n    font-family: \"Josefin Sans\", sans-serif;\n    color: hsl(236, 9%, 61%);\n  }\n  .toggleBox {\n    width: min(40%, 162px);\n    display: flex;\n    justify-content: space-between;\n    position: relative;\n  }\n  .toggleBox button {\n    font-weight: 700;\n    color: hsl(236, 9%, 61%);\n  }\n  .toggleBox button.active {\n    color: hsl(220, 98%, 61%);\n  }\n  @media (max-width: 500px) {\n    .toggleBox {\n      width: 100%;\n      background-color: ${props=>props.theme.TodoBGColor};\n      height: 60px;\n      position: absolute;\n      border-radius: 10px;\n      left: 0px;\n      top: 85px;\n      padding: 0 24% 0;\n      box-shadow: 7.1px 6px 6.5px rgba(0, 0, 0, 0.058),\n        30.8px 26.3px 21.9px rgba(0, 0, 0, 0.074),\n        117px 100px 98px rgba(0, 0, 0, 0.11);\n    }\n  }\n  @media (max-width: 375px) {\n    .toggleBox {\n      padding: 0 18% 0;\n    }\n  }\n`;\n\nconst FunctionalArea = ({ left, type, updateType,updateItems }) => {\n  function typeClick(event) {\n    updateType(event.target.id)\n  }\n  function clearCompletedClick() {\n    updateItems((prevItems) =>\n      prevItems.filter((prevItem) => !prevItem.isComplete)\n    );\n  }\n\n  return (\n    <FuncList>\n      <span>{left} items left</span>\n      <div className=\"toggleBox\">\n        <button id={SHOWALL} onClick={typeClick} className={type===SHOWALL?\"active\":\"\"}>\n          All\n        </button>\n        <button id={SHOWACTIVE} onClick={typeClick} className={type===SHOWACTIVE?\"active\":\"\"}>\n          Active\n        </button>\n        <button id={SHOWCOMPLETED} onClick={typeClick} className={type===SHOWCOMPLETED?\"active\":\"\"}>\n          Completed\n        </button>\n      </div>\n      <button onClick={clearCompletedClick}>Clear Completed</button>\n    </FuncList>\n  );\n};\nexport default FunctionalArea;\n","import React, { Fragment, useState } from \"react\";\nimport TodoInput from \"./Input\";\nimport TodoList from \"./List\";\nimport FunctionalArea from \"./FunctionalArea\";\nimport { SHOWALL } from \"../../utils/constants\";\n\n\nconst Todo = () => {\n  const [items, setItems] = useState([]);\n  const [showType, setShowType] = useState(SHOWALL)\n  return (\n    <Fragment>\n      <TodoInput addItem={setItems} />\n      <TodoList items={items} type={showType} setItems={setItems}/>\n      <FunctionalArea left={items.filter((item) => !item.isComplete).length} type={showType} updateType={setShowType} updateItems={setItems}/>\n    </Fragment>\n  );\n};\nexport default Todo;\n","import React from \"react\";\nimport styled from 'styled-components'\nimport { Sun, Moon } from 'react-feather';\nconst DarkModeToggle = ({darkMode,setDarkMode}) => {\n    return <Toggle onClick={() => { setDarkMode(!darkMode) }}>\n        {darkMode ? <Moon color={\"white\"} size=\"28px\"/> : <Sun color={\"white\"} size=\"28px\"/>}\n    </Toggle>\n}\n\nconst Toggle = styled.button`\n    border: none;\n    background-color: transparent;\n`;\n\nexport default DarkModeToggle","// 检查是否已存在键值对\n// 存在则取用，不存在则设为初始值\n// 包装set方法实现：修改state值、写入localstroage\nimport { useState } from \"react\";\nconst useLocalStorage = (key, initialValue) => {\n    const [storedValue, setStoredValue] = useState(() => {\n        const item = window.localStorage.getItem(key);\n        return item ? JSON.parse(item) : initialValue;\n    });\n    const setValue = (value) => {\n        // 尚未理解\n        const valueToStore = value instanceof Function ? value(storedValue) : value;\n        setStoredValue(valueToStore);\n        window.localStorage.setItem(key, JSON.stringify(valueToStore));\n    };\n    return [storedValue, setValue];\n};\nexport default useLocalStorage;\n","// 获取localstorage里dark-mode-enabled的值，初始化当前状态\n// set方法实现：修改localstoragem里mode参数，修改body节点class，修改state值\n\nimport useLocalStorage from \"./useLocalStorage\";\nimport { useEffect } from \"react\";\nconst useDarkMode = () => {\n  const [enabledState, setEnabledState] = useLocalStorage(\"dark-mode-enabled\");\n  const enabled = typeof enabledState !== \"undefined\" ? enabledState : false;\n  useEffect(() => {\n      // const className = \"dark-mode\";\n      // const element = window.document.body;\n      // if (enabled) {\n      //     element.classList.add(className);\n      // } else {\n      //     element.classList.remove(className);\n      // }\n  }, [enabled]);\n\n  \n  return [enabledState, setEnabledState];\n};\nexport default useDarkMode;\n","import React from \"react\";\nimport \"./App.css\";\nimport Todo from \"./components/Todo\";\nimport DarkModeToggle from \"./components/DarkModeToggle\";\nimport styled, { ThemeProvider, createGlobalStyle } from \"styled-components\";\nimport useDarkMode from \"../src/hooks/useDarkMode\";\n\nconst GlobalStyle = createGlobalStyle`\n  body {\n    background-image: ${(props) => props.theme.DesktopBGImg};\n    background-repeat: no-repeat;\n    background-size: 100% 300px;\n    background-color: ${(props) => props.theme.BasicBGColor};\n    font-family: var(--Font-Family);\n    font-size: var(--Font-Size);\n  }\n`;\nconst light = {\n  BasicBGColor: \"hsl(236, 33%, 92%)\",\n  TodoBGColor: \"hsl(0, 0%, 98%)\",\n  TodoFontColor: \"hsl(235, 19%, 35%)\",\n  TodoCompleteFontColor: \"hsl(236, 9%, 61%)\",\n  TodoplaceholderFontColor: \"hsl(236, 9%, 61%)\",\n  SeparationlineColor:\"hsl(236, 33%, 92%)\",\n  DesktopBGImg: \"var(--bg-desktop-light)\",\n  MobileBGImg: \"var(--bg-mobile-light)\",\n};\nconst dark = {\n  BasicBGColor: \"hsl(235, 21%, 11%)\",\n  TodoBGColor: \"hsl(235, 24%, 19%)\",\n  TodoFontColor: \"hsl(234, 39%, 85%)\",\n  TodoCompleteFontColor: \"hsl(234, 11%, 52%)\",\n  TodoplaceholderFontColor: \"hsl(236, 9%, 61%)\",\n  SeparationlineColor:\"hsl(233, 14%, 35%)\",\n  DesktopBGImg: \"var(--bg-desktop-dark)\",\n  MobileBGImg: \"var(--bg-mobile-dark)\",\n};\n\nconst Container = styled.div`\n  \n  display: flex;\n  justify-content: center;\n  align-items: center;\n  .app {\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    flex-direction: column;\n    width: min(90%, 540px);\n    margin-top: 80px;\n    margin-bottom: 80px;\n  }\n  .row {\n    display: flex;\n    width: 100%;\n    justify-content: space-between;\n    margin-bottom: 54px;\n  }\n  .title {\n    color: #fff;\n    text-transform: uppercase;\n    font-weight: var(--Font-Bold);\n    letter-spacing: 14px;\n  }\n\n  .tip {\n    margin-top: 100px;\n    color: var(--Dark-Grayish-Blue);\n    font-size: var(--Small-Font-Size);\n  }\n  @media (max-width: 768px) {\n    body {\n      background-image: ${(props) => props.theme.MobileBGImg};\n      background-size: 100% 30%;\n    }\n    .app {\n      margin-top: 60px;\n      margin-bottom: 35px;\n    }\n    .row {\n      margin-bottom: 35px;\n    }\n  }\n  @media (max-width: 500px) {\n    .app {\n      width: 90%;\n    }\n    \n  }\n`;\nconst App = () => {\n  const [darkMode, setDarkMode] = useDarkMode();\n  return (\n    <ThemeProvider theme={darkMode?dark:light}>\n      <React.Fragment>\n        <GlobalStyle />\n        <Container>\n          <div className=\"app\">\n            <div className=\"row\">\n              <h1 className=\"title\">todo</h1>\n              <DarkModeToggle darkMode={darkMode} setDarkMode={setDarkMode}/>\n            </div>\n            <Todo />\n            <p className=\"tip\">Drag and drop to reorder list</p>\n          </div>\n        </Container>\n      </React.Fragment>\n    </ThemeProvider>\n  );\n};\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}